citing_articles <- dse_papers$`dc:identifier` # extracting the IDs of our articles on dse
citation_list <- list()
for(i in 1:length(citing_articles)){
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
headers = insttoken)
if(!is.null(citations_query$content$`abstracts-retrieval-response`)){ # Checking if the article has some references before collecting them
nb_ref <- as.numeric(citations_query$content$`abstracts-retrieval-response`$references$`@total-references`)
citations <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
if(nb_ref > 40){ # The loop to collect all the references
nb_query_left_to_do <- floor((nb_ref) / 40)
cat("Number of requests left to do :", nb_query_left_to_do, "\n")
for (j in 1:nb_query_left_to_do){
cat("Request n°", j , "\n")
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
startref = 40*j+1,
headers = insttoken)
citations_sup <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
citations <- bind_rows(citations, citations_sup)
}
}
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citation_list[[citing_articles[i]]] <- citations
}
}
dse_references <- bind_rows(citation_list, .id = "citing_art")
}
refreshData()
apiKey <- "c4f594578d6489c29e1fb940d494e674"
refreshData()
api_key <- "c4f594578d6489c29e1fb940d494e674"
refreshData()
# REFRESH OUR DATA
refreshData <- function(){
## Scopus first. I just did a search with quoted phrase. Did not seem to pick
## up on journal titles but I should go back to make sure.
## Thanks to https://aurelien-goutsmedt.com/post/extracting-biblio-data-1/
## Scopus API: You may, subject to the use restrictions set out below, for
## academic research purposes only:
## text and data mine the ScienceDirect dataset via the API and load and
## integrate the results (the TDM Output) on your internal system for access
## by authorized users; and
## share the TDM Output externally, subject to the following notice:
## © Some rights reserved. This work permits academic research purposes only,
## distribution, and reproduction in any medium, provided the original author
## and source are credited.
api_key <- "c4f594578d6489c29e1fb940d494e674"
set_api_key(api_key)
dse_query <- rscopus::scopus_search("TITLE-ABS-KEY(\"Data Science Education\")",
view = "COMPLETE")
dse_data_raw <- gen_entries_to_df(dse_query$entries)
dse_papers <- dse_data_raw$df
dse_affiliations <- dse_data_raw$affiliation
dse_authors <- dse_data_raw$author
## Extract references. A loop because max 40 are extracted
citing_articles <- dse_papers$`dc:identifier` # extracting the IDs of our articles on dse
citation_list <- list()
for(i in 1:length(citing_articles)){
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
headers = insttoken)
if(!is.null(citations_query$content$`abstracts-retrieval-response`)){ # Checking if the article has some references before collecting them
nb_ref <- as.numeric(citations_query$content$`abstracts-retrieval-response`$references$`@total-references`)
citations <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
if(nb_ref > 40){ # The loop to collect all the references
nb_query_left_to_do <- floor((nb_ref) / 40)
cat("Number of requests left to do :", nb_query_left_to_do, "\n")
for (j in 1:nb_query_left_to_do){
cat("Request n°", j , "\n")
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
startref = 40*j+1,
headers = insttoken)
citations_sup <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
citations <- bind_rows(citations, citations_sup)
}
}
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citation_list[[citing_articles[i]]] <- citations
}
}
dse_references <- bind_rows(citation_list, .id = "citing_art")
}
refreshData()
refreshData()
# REFRESH OUR DATA
refreshData <- function(){
## Scopus first. I just did a search with quoted phrase. Did not seem to pick
## up on journal titles but I should go back to make sure.
## Thanks to https://aurelien-goutsmedt.com/post/extracting-biblio-data-1/
# Note that you will need to be on your institution's network or see
# instoken instructions
## Scopus API: You may, subject to the use restrictions set out below, for
## academic research purposes only:
## text and data mine the ScienceDirect dataset via the API and load and
## integrate the results (the TDM Output) on your internal system for access
## by authorized users; and
## share the TDM Output externally, subject to the following notice:
## © Some rights reserved. This work permits academic research purposes only,
## distribution, and reproduction in any medium, provided the original author
## and source are credited.
api_key <- "c4f594578d6489c29e1fb940d494e674"
set_api_key(api_key)
dse_query <- rscopus::scopus_search("TITLE-ABS-KEY(\"Data Science Education\")",
view = "COMPLETE")
dse_data_raw <- gen_entries_to_df(dse_query$entries)
dse_papers <- dse_data_raw$df
dse_affiliations <- dse_data_raw$affiliation
dse_authors <- dse_data_raw$author
## Extract references. A loop because max 40 are extracted
citing_articles <- dse_papers$`dc:identifier` # extracting the IDs of our articles on dse
citation_list <- list()
for(i in 1:length(citing_articles)){
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF")
if(!is.null(citations_query$content$`abstracts-retrieval-response`)){ # Checking if the article has some references before collecting them
nb_ref <- as.numeric(citations_query$content$`abstracts-retrieval-response`$references$`@total-references`)
citations <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
if(nb_ref > 40){ # The loop to collect all the references
nb_query_left_to_do <- floor((nb_ref) / 40)
cat("Number of requests left to do :", nb_query_left_to_do, "\n")
for (j in 1:nb_query_left_to_do){
cat("Request n°", j , "\n")
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
startref = 40*j+1,
headers = insttoken)
citations_sup <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
citations <- bind_rows(citations, citations_sup)
}
}
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citation_list[[citing_articles[i]]] <- citations
}
}
dse_references <- bind_rows(citation_list, .id = "citing_art")
}
refreshData()
# REFRESH OUR DATA
refreshData <- function(){
## Scopus first. I just did a search with quoted phrase. Did not seem to pick
## up on journal titles but I should go back to make sure.
## Thanks to https://aurelien-goutsmedt.com/post/extracting-biblio-data-1/
# Note that you will need to be on your institution's network or see
# instoken instructions
## Scopus API: You may, subject to the use restrictions set out below, for
## academic research purposes only:
## text and data mine the ScienceDirect dataset via the API and load and
## integrate the results (the TDM Output) on your internal system for access
## by authorized users; and
## share the TDM Output externally, subject to the following notice:
## © Some rights reserved. This work permits academic research purposes only,
## distribution, and reproduction in any medium, provided the original author
## and source are credited.
api_key <- "c4f594578d6489c29e1fb940d494e674"
set_api_key(api_key)
dse_query <- rscopus::scopus_search("TITLE-ABS-KEY(\"Data Science Education\")",
view = "COMPLETE")
dse_data_raw <- gen_entries_to_df(dse_query$entries)
dse_papers <- dse_data_raw$df
dse_affiliations <- dse_data_raw$affiliation
dse_authors <- dse_data_raw$author
## Extract references. A loop because max 40 are extracted
citing_articles <- dse_papers$`dc:identifier` # extracting the IDs of our articles on dse
citation_list <- list()
for(i in 1:length(citing_articles)){
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF")
if(!is.null(citations_query$content$`abstracts-retrieval-response`)){ # Checking if the article has some references before collecting them
nb_ref <- as.numeric(citations_query$content$`abstracts-retrieval-response`$references$`@total-references`)
citations <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
if(nb_ref > 40){ # The loop to collect all the references
nb_query_left_to_do <- floor((nb_ref) / 40)
cat("Number of requests left to do :", nb_query_left_to_do, "\n")
for (j in 1:nb_query_left_to_do){
cat("Request n°", j , "\n")
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
startref = 40*j+1)
citations_sup <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
citations <- bind_rows(citations, citations_sup)
}
}
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citation_list[[citing_articles[i]]] <- citations
}
}
dse_references <- bind_rows(citation_list, .id = "citing_art")
}
refreshData()
# REFRESH OUR DATA
refreshData <- function(){
## Scopus first. I just did a search with quoted phrase. Did not seem to pick
## up on journal titles but I should go back to make sure.
## Thanks to https://aurelien-goutsmedt.com/post/extracting-biblio-data-1/
# Note that you will need to be on your institution's network or see
# instoken instructions
## Scopus API: You may, subject to the use restrictions set out below, for
## academic research purposes only:
## text and data mine the ScienceDirect dataset via the API and load and
## integrate the results (the TDM Output) on your internal system for access
## by authorized users; and
## share the TDM Output externally, subject to the following notice:
## © Some rights reserved. This work permits academic research purposes only,
## distribution, and reproduction in any medium, provided the original author
## and source are credited.
api_key <- "c4f594578d6489c29e1fb940d494e674"
set_api_key(api_key)
dse_query <- rscopus::scopus_search("TITLE-ABS-KEY(\"Data Science Education\")",
view = "COMPLETE")
dse_data_raw <- gen_entries_to_df(dse_query$entries)
dse_papers <- dse_data_raw$df
dse_affiliations <- dse_data_raw$affiliation
dse_authors <- dse_data_raw$author
## Extract references. A loop because max 40 are extracted
citing_articles <- dse_papers$`dc:identifier` # extracting the IDs of our articles on dse
citation_list <- list()
for(i in 1:length(citing_articles)){
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF")
if(!is.null(citations_query$content$`abstracts-retrieval-response`)){ # Checking if the article has some references before collecting them
nb_ref <- as.numeric(citations_query$content$`abstracts-retrieval-response`$references$`@total-references`)
citations <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
if(nb_ref > 40){ # The loop to collect all the references
nb_query_left_to_do <- floor((nb_ref) / 40)
cat("Number of requests left to do :", nb_query_left_to_do, "\n")
for (j in 1:nb_query_left_to_do){
cat("Request n°", j , "\n")
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
startref = 40*j+1)
citations_sup <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
citations <- dplyr::bind_rows(citations, citations_sup)
}
}
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citation_list[[citing_articles[i]]] <- citations
}
}
dse_references <- dplyr::bind_rows(citation_list, .id = "citing_art")
}
refreshData()
library(magrittr)
View(refreshData)
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
dplyr::select_if(~!all(is.na(.)))
library(dplyr)
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
for(i in 1:length(citing_articles)){
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF")
if(!is.null(citations_query$content$`abstracts-retrieval-response`)){ # Checking if the article has some references before collecting them
nb_ref <- as.numeric(citations_query$content$`abstracts-retrieval-response`$references$`@total-references`)
citations <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
if(nb_ref > 40){ # The loop to collect all the references
nb_query_left_to_do <- floor((nb_ref) / 40)
cat("Number of requests left to do :", nb_query_left_to_do, "\n")
for (j in 1:nb_query_left_to_do){
cat("Request n°", j , "\n")
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
startref = 40*j+1)
citations_sup <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
citations <- bind_rows(citations, citations_sup)
}
}
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citation_list[[citing_articles[i]]] <- citations
}
}
# REFRESH OUR DATA
refreshData <- function(){
## Scopus first. I just did a search with quoted phrase. Did not seem to pick
## up on journal titles but I should go back to make sure.
## Thanks to https://aurelien-goutsmedt.com/post/extracting-biblio-data-1/
# Note that you will need to be on your institution's network or see
# instoken instructions
## Scopus API: You may, subject to the use restrictions set out below, for
## academic research purposes only:
## text and data mine the ScienceDirect dataset via the API and load and
## integrate the results (the TDM Output) on your internal system for access
## by authorized users; and
## share the TDM Output externally, subject to the following notice:
## © Some rights reserved. This work permits academic research purposes only,
## distribution, and reproduction in any medium, provided the original author
## and source are credited.
api_key <- "c4f594578d6489c29e1fb940d494e674"
set_api_key(api_key)
dse_query <- rscopus::scopus_search("TITLE-ABS-KEY(\"Data Science Education\")",
view = "COMPLETE")
dse_data_raw <- gen_entries_to_df(dse_query$entries)
dse_papers <- dse_data_raw$df
dse_affiliations <- dse_data_raw$affiliation
dse_authors <- dse_data_raw$author
## Extract references. A loop because max 40 are extracted
citing_articles <- dse_papers$`dc:identifier` # extracting the IDs of our articles on dse
citation_list <- list()
for(i in 1:length(citing_articles)){
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF")
if(!is.null(citations_query$content$`abstracts-retrieval-response`)){ # Checking if the article has some references before collecting them
nb_ref <- as.numeric(citations_query$content$`abstracts-retrieval-response`$references$`@total-references`)
citations <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
if(nb_ref > 40){ # The loop to collect all the references
nb_query_left_to_do <- floor((nb_ref) / 40)
cat("Number of requests left to do :", nb_query_left_to_do, "\n")
for (j in 1:nb_query_left_to_do){
cat("Request n°", j , "\n")
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
startref = 40*j+1)
citations_sup <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
citations <- bind_rows(citations, citations_sup)
}
}
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citation_list[[citing_articles[i]]] <- citations
}
}
dse_references <- bind_rows(citation_list, .id = "citing_art")
}
api_key <- "c4f594578d6489c29e1fb940d494e674"
refreshData()
testData <- refreshData()
testData
rm(list = ls())
library(agop)
library(bibliometrix)
library(dplyr)
library(here)
library(magrittr)
library(rscopus)
api_key <- "c4f594578d6489c29e1fb940d494e674"
set_api_key(api_key)
dse_query <- rscopus::scopus_search("TITLE-ABS-KEY(\"Data Science Education\")",
view = "COMPLETE")
dse_data_raw <- gen_entries_to_df(dse_query$entries)
dse_data_raw <- gen_entries_to_df(dse_query$entries)
dse_papers <- dse_data_raw$df
dse_authors <- dse_data_raw$author
## Extract references. A loop because max 40 are extracted
citing_articles <- dse_papers$`dc:identifier` # extracting the IDs of our articles on dse
citation_list <- list()
for(i in 1:length(citing_articles)){
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF")
if(!is.null(citations_query$content$`abstracts-retrieval-response`)){ # Checking if the article has some references before collecting them
nb_ref <- as.numeric(citations_query$content$`abstracts-retrieval-response`$references$`@total-references`)
citations <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
if(nb_ref > 40){ # The loop to collect all the references
nb_query_left_to_do <- floor((nb_ref) / 40)
cat("Number of requests left to do :", nb_query_left_to_do, "\n")
for (j in 1:nb_query_left_to_do){
cat("Request n°", j , "\n")
citations_query <- abstract_retrieval(citing_articles[i],
identifier = "scopus_id",
view = "REF",
startref = 40*j+1)
citations_sup <- gen_entries_to_df(citations_query$content$`abstracts-retrieval-response`$references$reference)$df
citations <- bind_rows(citations, citations_sup)
}
}
citations <- citations %>%
as_tibble(.name_repair = "unique") %>%
select_if(~!all(is.na(.)))
citation_list[[citing_articles[i]]] <- citations
}
}
View(citation_list)
View(citation_list)
bind_rows(citation_list, .id = "citing_art")
bound_citation_list <- bind_rows(citation_list, .id = "citing_art")
View(bound_citation_list)
View(dse_papers)
View(dse_authors)
View(dse_query)
View(bound_citation_list)
View(citations)
View(dse_papers)
dse_references <- bind_rows(citation_list, .id = "citing_art")
View(dse_references)
View(dse_authors)
View(dse_references)
library(wosr)
install.packages("wosr")
library(wosr)
results <- biblioAnalysis(data.frame(dse_papers))
data.frame(dse_papers)
biblioAnalysis(data.frame(dse_papers))
colnames(dse_references)
direct_citation %>%
add_count(new_id_ref) %>%
select(new_id_ref, n) %>%
unique() %>%
slice_max(n, n = 10) %>%
left_join(select(dse_references, new_id_ref, references)) %>%
select(dse_references, n) %>%
knitr::kable()
View(citation_list)
View(citation_list)
View(citations)
View(citations)
View(citations_query)
bound_citation_list %>%
add_count(new_id_ref) %>%
select(new_id_ref, n) %>%
unique() %>%
slice_max(n, n = 10) %>%
left_join(select(references, new_id_ref, references)) %>%
select(references, n) %>%
knitr::kable()
M$DB[1]
bound_citation_list$DB[1]
data.frame(bound_citation_list)$DB[1]
columns(data.frame(bound_citation_list))
colnames(data.frame(bound_citation_list)
)
bound_citation_list$sourcetitle
bound_citation_list$source
bound_citation_list$source = "Scopus"
bound_citation_list$source[] = "Scopus"
bound_citation_list$source[0] = "Scopus"
bound_citation_list$source <- "Scopus"
bound_citation_list %>% mutate(source = "Scopus")
biblioAnalysis(data.frame(bound_citation_list))
scopusPrimary <- convert2df(file = "scopusPrimary.csv", dbsource = 'scopus', format = "csv")
View(scopusPrimary)
new-dse-papers <- convert2df(dse_papers, dbsource = 'scopus', format = "api)
""
"
new-dse-papers <- convert2df(dse_papers, dbsource = 'scopus', format = "api")
new-dse-papers <- convert2df(bound_citation_list, dbsource = 'scopus', format = "api")
View(dse_papers)
new-dse-papers <- convert2df(as.matrix(bound_citation_list), dbsource = 'scopus', format = "api")
new-dse-papers <- convert2df(as.matrix(dse_papers), dbsource = 'scopus', format = "api")
convert2df
biblioshiny()
View(bound_citation_list)
View(dse_references)
View(bound_citation_list)
View(dse_papers)
convert2df(as.matrix(dse_papers), dbsource = 'scopus', format = 'api')
convert2df(dse_papers, dbsource = 'scopus', format = 'api')
M <- data.frame
convert2df(dse_papers, dbsource = 'scopus', format = 'api')
M <- data.frame()
convert2df(dse_papers, dbsource = 'scopus', format = 'api')
View(bound_citation_list)
typeof(dse_papers)
dse_papers_df <- do.call(rbind.data.frame, dse_papers)
View(dse_papers_df)
rm(dse_papers_df)
dse_papers_df <- do.call(cbind.data.frame, dse_papers)
View(dse_papers_df)
typeof(dse_papers)
View(dse_papers_df)
View(dse_papers_df)
View(dse_papers_df)
rm(dse_papers_df)
rm(M)
View(scopusPrimary)
View(scopusPrimary)
View(dse_references)
rm(bound_citation_list)
View(citations_query)
View(citations_sup)
View(dse_data_raw)
View(dse_query)
View(dse_references)
View(citations)
View(citation_list)
View(dse_papers)
cat("test")
rm(list = ls())
set_api_key(“c4f594578d6489c29e1fb940d494e674")
set_api_key("c4f594578d6489c29e1fb940d494e674")
